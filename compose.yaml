# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: "3"
services:
  host1:
    command: python app.py $HOST
    image: virolivs/app #imagem que vai ser buildada quando estiver pronta
    tty: true #criar terminal
    stdin_open: true #criar terminal
    networks: 
      my-network:
        ipv4_address: 192.168.1.2 #mudar só o ultimo valor (nao pode ser 1 nem 0)
    environment:
      HOST: host1
  host2:
    command: python app.py $HOST
    image: virolivs/app #imagem que vai ser buildada quando estiver pronta
    tty: true #criar terminal
    stdin_open: true #criar terminal
    networks: 
      my-network:
        ipv4_address: 192.168.1.3 #mudar só o ultimo valor (nao pode ser 1 nem 0)
    environment:
      HOST: host2
  host3:
    command: python app.py $HOST
    image: virolivs/app #imagem que vai ser buildada quando estiver pronta
    tty: true #criar terminal
    stdin_open: true #criar terminal
    networks: 
      my-network:
        ipv4_address: 192.168.1.4 #mudar só o ultimo valor (nao pode ser 1 nem 0)
    environment:
      HOST: host3
  host4:
    command: python app.py $HOST
    image: virolivs/app #imagem que vai ser buildada quando estiver pronta
    tty: true #criar terminal
    stdin_open: true #criar terminal
    networks: 
      my-network:
        ipv4_address: 192.168.1.5 #mudar só o ultimo valor (nao pode ser 1 nem 0)
    environment:
      HOST: host4
  host5:
    command: python app.py $HOST
    image: virolivs/app #imagem que vai ser buildada quando estiver pronta
    tty: true #criar terminal
    stdin_open: true #criar terminal
    networks: 
      my-network:
        ipv4_address: 192.168.1.6 #mudar só o ultimo valor (nao pode ser 1 nem 0)
    environment:
      HOST: host5
  host6:
    command: python app.py $HOST
    image: virolivs/app #imagem que vai ser buildada quando estiver pronta
    tty: true #criar terminal
    stdin_open: true #criar terminal
    networks: 
      my-network:
        ipv4_address: 192.168.1.7 #mudar só o ultimo valor (nao pode ser 1 nem 0)
    environment:
      HOST: host6
  # server:
  #   ports:
  #     - 8000:8000
    # image: virolivs/new-image
networks:
  my-network: #minha rede
    ipam: 
      config: 
        - subnet: 192.168.1.0/24 #ip - mudar dps
      
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

